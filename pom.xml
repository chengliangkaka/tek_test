<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.12</version> <!-- 使用 Spring Boot 2.7.12 -->
    </parent>

    <groupId>org.example</groupId>
    <artifactId>tek</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <maven.jacoco.version>0.8.8</maven.jacoco.version>
        <spring-boot.version>2.7.12</spring-boot.version>
        <spring-cloud.version>2021.0.7</spring-cloud.version>
        <google-guava.version>30.1.1-jre</google-guava.version>
        <groovy-all.version>3.0.1</groovy-all.version>
        <spring-spock.version>2.0-M2-groovy-3.0</spring-spock.version>
    </properties>

    <modules>
        <module>ping-service</module>
        <module>pong-service</module>
    </modules>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${google-guava.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Spring WebFlux dependency -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy-all.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
            <version>${spring-spock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-spring</artifactId>
            <version>${spring-spock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--spring boot maven plugin automake the main class meta into package-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--build and execute groovy code-->
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compileTests</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <includes>
                        <include>**/*Spec.java</include>
                        <include>**/*Test.java</include>
                    </includes>
<!--                    <parallel>methods</parallel>-->
<!--                    <threadCount>4</threadCount>-->
<!--                    <argLine>@{argLine}</argLine>-->
                    <rerunFailingTestsCount>1</rerunFailingTestsCount>
                </configuration>
            </plugin>
            <!-- JaCoCo Plugin -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.version}</version> <!-- Adjust to the latest version -->
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <phase>test</phase> <!-- Execute during the test phase -->
                    </execution>
                    <execution>
                        <id>check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <!-- 检查整个项目的分支覆盖率 -->
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>BRANCH</counter> <!-- 设置分支覆盖率 -->
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.80</minimum> <!-- 设置最低分支覆盖率为 80% -->
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
<!--                    <execution>-->
<!--                        <id>default-report-aggregate</id>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash; Generate an HTML report after running tests &ndash;&gt;-->
<!--                            <goal>report-aggregate</goal>-->
<!--                        </goals>-->
<!--                        <phase>test</phase> &lt;!&ndash; Execute during the test phase &ndash;&gt;-->
<!--                    </execution>-->
                </executions>
            </plugin>
        </plugins>
    </build>
</project>